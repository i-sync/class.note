单例模式(singleton):
  顾名思义，就是只有一个实例。
  为对象的创建模式，单例模式确保某一个类只有一个实例，
  而且自行实例化并向整个系统提供这个实例。类称为单例类
  要点:
    1.某个类只能有一个实例
    2.它必须自动创建这个实例
    3.它必须自行向整个系统提供这个实例
  方式：
    1.饿汉式:不管用不用得上，一开始就建立这个单例对象
        特点:是线程安全的，在类加载的同时就已经创建好一个
	     静态的对象供系统使用，以后不再改变
	     推荐使用
        public class Singleton
	{
		private static Singleton singleton = new Singleton();
		private Singleton()
		{
		}
		public static Singleton GetInstance()
		{
			return singleton;
		}
	}
    2.懒汉式:真正用到的时候才去创建单例对象
        特点:对对象的访问不是线程安全的
	     在需要的时候才创建对象，延时加载
      public class Singleton
      {
		private static Singleton singleton = null;
		private Singleton()
		{
		}
		public static Singleton GetInstance()
		{
			if(singleton == null)
			{
				singleton = new Singleton();
			}
			return singleton;
		}
      }

做单例模式要点:
饿汉式:
   1.成员:声明私有静态本类的实例
   2.私有构造函数
   3.公有静态方法GetInstance,用于返回私有静态本例实例
懒汉式: 
   1.成员:声明私有静态null本类实例
   2.私有构造函数
   3.公有静态方法GetInstance,先判断是否为NULL,
     若为NULL,则创建对象,否则直接返回该对象