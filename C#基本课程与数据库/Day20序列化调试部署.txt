			序列化
---------------------------------------------------

什么是序列化与反序列化
序列化是将对象状态存储到[流,内在,磁盘或网络]的过程
反序列化是序列化的相反过程:将存储到介质的对象转换为对象的过程

为什么要使用序列化
1.将对象状态保存到存储介质,方便以后重新创建对象的精确副本
2.将对象状态保存到存储介质,方便在远程处理中将对象按值从一个
	应用程序域发送至另一个应用程序域

序列化准则
类编译之后不能再序列化,因此设计新的类时应考虑序列化
何时用:
1.此类需要用于远程处理,跨应用程序域发送
2.用户需要从序列化的类派生新类
建议:Model层中的所有类都标记为可序列化的
	可序列化就是一个特性(特殊的性质)
	在类上,标记为可序列化[Serializable]

.NET Framework 的序列化技术m

System.Runtime.Serialization
   包含可用于序列化和反序列化对象的类
IFormatter接口：提供将序列化对象格式化的功能

BinaryFormatter：是序列化的工具，以二进制的格式作序列化和反序列化

			调试
----------------------------------------------------------
调试：查找并消除应用程序中的缺陷或错误的过程称为调试
调试的必要性：
    帮助查找并消除应用程序中的错误，使应用程序成功运行并能产生正确的结果
    从长运来看，可以减少维护应用程序所需的时间、精边和成本
错误类型
    1.语法错误
    2.语义错误
    3.逻辑错误


打包:将应用程序中所有文件绑定对一个文件中的过程
部署:将已完成的应用程序或组件移至并安装在客户机的过程











