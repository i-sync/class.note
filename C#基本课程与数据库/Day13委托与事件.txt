null:意味着不指向,也就是不可以再使用该变量
	使用指是:调用它的属性或方法...
	用null操作属性方法等,都会报空指针错误
	错误提示:未将对象的引用设置到对象的实例
建议:成员字段为string,自己给个初始值
  初始值可有两种方式:
    1.String .Empty  eg:private string name=String .Empty;(建议使用)
    2."" eg:private string name = "";
    name=""与name=string .Empty 的区别?
    均是赋值为空,都不会引发空指针异常
    但是,name=""会在内存中开辟空间,存储的内容就是""
    而name=String . Empty不会在内存中开辟空间

所有控件(Button,Label...)都继承自Control

委托[性质]是C# 中的一种引用数据类型,类似于C/C++中的指针,是类型安全的
   委托定义的是方法的签名(返回值类型,参数)
   是定义了方法的返回类型和参数组成的数据类型
   说明:委托是封装的一种,封装的是方法,
	凡是与委托定义的方法签名一致的方法都可以委托
	当委托发生后,委托与方法具有一致的行为,调用委托就是等于调用方法

   使用:在运行时决定调用哪一个方法(与重载/重写/隐藏一样)
	一般定义在类的外面,因为定义委托相当于定义了一个引用数据类型
        public delegate 返回值类型 委托名([参数1,参数2...]);
	实例化委托:将方法与委托关联起来(方法与委托签名一致)
	调用委托:跟调用方法一样
	委托名(参数);或 委托名.Invoke(参数);

多播委托:一个委托绑定多个方法,只有当返回值类型为void时才有意义
	C#默认就是多播委托,如果有返回值,没有意义,就返回最后一个结果

事件从本质上讲:一种通讯的方式
从语法上讲,是语法中的一个语法结构,是类的成员
从面向对象的含义上讲,一个对象的事件可以看成是该对象的特殊行为
从设计模式上讲,是微软.NET的一种设计模式,相当于23个设计模式中的观察者模式
								
事件本质:指的就是计算机的一种基本通讯方式,即消息通知方式,简称通知或叫事件

特点:事件使用委托来封装方法
     或者说,事件是基于委托的,先有委托再有事件

两个名词:
    事件的发送方(发布方):引发事件的对象
    事件的接收方(订户):捕获事件并对事件进行处理的对象
通过委托将发送方与接收方建立联系,使之能够通讯

事件使用:定义事件:要先定义委托
	语法:访问修饰符 event 委托名 事件名
	订阅(预定)事件:将发送方与接收方(方法)通过委托关联起来
	事件名+= new 委托名(方法名);
	引发(触发)事件
	    事件名(参数)



